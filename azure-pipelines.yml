name:  $[format('{0:yyyyMMdd\-HHmmss}', pipeline.startTime)]

variables:
  CURRENT_DATE: $[format('{0:yyyyMMdd\-HHmmss}', pipeline.startTime)]
  REPOSITORY_NAME: $(Build.Repository.Name)
  COMMIT_TAG: $(git log --format=%h -1)

jobs:
  - job: docker_build
    pool:
      vmImage: 'Ubuntu-16.04'
    displayName: "Build with Docker using a VERY old libnds and devkitARM r47"
    steps:
      - script: |
          sudo apt update
          sudo apt install p7zip-full
        displayName: "Install 7zip"
      - script: |
          docker build -t gbarunner2 --label gbarunner2 ./docker
          docker ps -a
        displayName: "Build Docker image"
      - script: |
          docker run --rm -i -v "$(Build.SourcesDirectory):/data" gbarunner2 make
        displayName: "Build GBARunner2 with Docker using old libnds and devkitARM r47"
        
      - script: |
          mv bin/ GBARunner2/
          7z a GBARunner2.7z GBARunner2/
          cp GBARunner2.7z $(Build.ArtifactStagingDirectory)/GBARunner2.7z
        displayName: 'Pack 7z Package'
      - task: PublishBuildArtifacts@1
        displayName: "Publish build to Azure"
        inputs:
          pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
          artifactName: 'build-devkitARM-Docker'

    # Only run this for non-PR jobs.
  - job: publish_build_twlbot
    displayName: "Publish build to TWLBot"
    dependsOn: 
      - latest_build
      - docker_build
    condition: and(succeeded('docker_build'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))
    
    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'build-devkitARM-latest'
        displayName: "Retrieving artifacts from devkitARM Build"
      - task: DownloadBuildArtifacts@0
        inputs:
          downloadPath: $(Build.ArtifactStagingDirectory)
          artifactName: 'build-devkitARM-Docker'
        displayName: "Retrieving artifacts from Docker build"
      - script: 
          ls -a $(Build.ArtifactStagingDirectory)
      - script: |
          echo '##vso[task.setvariable variable=COMMIT_TAG]'$(git log --format=%h -1)
          echo '##vso[task.setvariable variable=COMMIT_MESSAGE]'$(git log --pretty=format:"%an - %s" -1)

          git config --global user.email "flamekat54@aol.com"
          git config --global user.name "TWLBot"
          git clone --depth 1 https://$GITHUB_TOKEN@github.com/TWLBot/overflow-builds.git
          cd overflow-builds/
          cp $(Build.ArtifactStagingDirectory)/build-devkitARM-Docker/GBARunner2.7z GBARunner2.7z
          git stage .
          git commit -m "GBARunner2 | $(COMMIT_TAG)"
          git push origin master
          git tag v$CURRENT_DATE

          echo '##vso[task.setvariable variable=TWLBOT_COMMIT]'$(git log -1 --format="%H")
        displayName: "Commit and push to TWLBot/overflow-builds"

      - task: GitHubRelease@0
        displayName: "Release to TWLBot/overflow-builds"
        inputs:
          gitHubConnection: TWLBot
          repositoryName: TWLBot/Builds
          action: create
          target: $(TWLBOT_COMMIT)
          tagSource: 'manual'
          tag: v$(CURRENT_DATE)
          title: TWiLightMenu | $(COMMIT_TAG)
          releaseNotesSource: input
          releaseNotes: $(COMMIT_MESSAGE)
          assets: '$(Build.ArtifactStagingDirectory)/**/*.7z'
          isPreRelease: true
          addChangeLog: false

  - job: send_webhook_success
    dependsOn: publish_build_twlbot
    displayName: Send Discord Success Webhook
    condition: and(succeeded('publish_build_twlbot'), not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))
    steps: 
      - script: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-azure.sh
          chmod +x send.sh
          ./send.sh success $WEBHOOK_URL
        displayName: "Send success webhook"
  - job: send_webhook_failure
    dependsOn: publish_build_twlbot
    displayName: Send Discord Failure Webhook
    condition: and(or(failed('publish_build_twlbot'), failed('latest_build'), failed('docker_build')), not(startsWith(variables['Build.SourceBranch'], 'refs/pull')))
    steps: 
      - script: |
          curl -o send.sh https://raw.githubusercontent.com/DS-Homebrew/discord-webhooks/master/send-azure.sh
          chmod +x send.sh
          ./send.sh failure $WEBHOOK_URL
        displayName: "Send failure webhook"
